name: Generar archivo YAML de Secret desde HCP Vault Secrets

on:
  workflow_dispatch:

jobs:
  generar-secret-yaml:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout del repositorio
        uses: actions/checkout@v4

      - name: Obtener access token desde HCP Vault (Service Principal)
        id: auth
        run: |
          RESPONSE=$(curl --silent --location "https://auth.idp.hashicorp.com/oauth2/token" \
            --header "Content-Type: application/x-www-form-urlencoded" \
            --data-urlencode "client_id=${{ secrets.HCP_CLIENT_ID }}" \
            --data-urlencode "client_secret=${{ secrets.HCP_CLIENT_SECRET }}" \
            --data-urlencode "grant_type=client_credentials" \
            --data-urlencode "audience=https://api.hashicorp.cloud")

          echo "üîç Respuesta del token: $RESPONSE"

          TOKEN=$(echo "$RESPONSE" | jq -r '.access_token')

          if [[ "$TOKEN" == "null" || -z "$TOKEN" ]]; then
            echo "‚ùå Error: Token inv√°lido o no obtenido."
            exit 1
          fi
          
          echo "‚úÖ Token obtenido correctamente (longitud: ${#TOKEN})"
          echo "HCP_API_TOKEN=$TOKEN" >> $GITHUB_ENV


      - name: Leer secretos desde HCP Vault y generar archivo YAML (Base64)
        run: |
          BASE_URL="https://api.cloud.hashicorp.com/secrets/2023-11-28"
          ORG_ID="09b95cd0-d483-4255-93fb-8e35c1dbfae5"
          PROJECT_ID="c2251c51-0cf9-4989-ba00-d9794140dc2b"
          APP_NAME="sample-app"

          get_secret() {
          echo "üîç Consultando secreto: $1"

          RESPONSE=$(curl --silent --location "$BASE_URL/organizations/$ORG_ID/projects/$PROJECT_ID/apps/$APP_NAME/secrets/$1" \
          --header "Authorization: Bearer $HCP_API_TOKEN")

          echo "üßæ Respuesta cruda: $RESPONSE"

          # Accede correctamente al valor si es secreto tipo KV (key-value)
          echo "$RESPONSE" | jq -r '.secret.kv.latest_version.data.value'

          }


          ORG=$(get_secret SINGLESTORE_ORG_ID)
          GROUP=$(get_secret SINGLESTORE_WORKSPACE_GROUP_ID)
          KEY=$(get_secret SINGLESTORE_API_KEY)

          # Validaciones
          if [[ -z "$ORG" || -z "$GROUP" || -z "$KEY" ]]; then
            echo "‚ùå Error: Uno o m√°s secretos est√°n vac√≠os o no existen."
            exit 1
          fi

          ORG_B64=$(echo -n "$ORG" | base64)
          GROUP_B64=$(echo -n "$GROUP" | base64)
          KEY_B64=$(echo -n "$KEY" | base64)

          # Crear el archivo YAML
          cat <<-EOF > singlestore-secret.yaml
          apiVersion: v1
          kind: Secret
          metadata:
          name: singlestore-secret
          namespace: singlestore-collector
           data:
          SINGLESTORE_ORG_ID: $ORG_B64
          SINGLESTORE_WORKSPACE_GROUP_ID: $GROUP_B64
          SINGLESTORE_API_KEY: $KEY_B64
          EOF

      - name: Mostrar YAML generado
        run: cat singlestore-secret.yaml

      - name: Guardar YAML como artefacto
        uses: actions/upload-artifact@v4
        with:
          name: singlestore-secret
          path: singlestore-secret.yaml
